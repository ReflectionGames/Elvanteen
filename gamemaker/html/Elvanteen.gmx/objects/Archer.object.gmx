<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Gard_red_down_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-300</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>in=instance_create(x,y,good_target)
in.go=id
direction=270
alarm[1]=random(20)
self.life=100
self.attack=1
self.see=400
self.action=-1
self.canshoot=0
xs=x
ys=y
zap=false
path=path_add()                     //

//do not mess with this or move it
//////////////////////////////////////
self.life_max=self.life             //
add_self_to_seen()                  //
//////////////////////////////////////
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>path_delete(path)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sound_play(bad_dead)
with(in)
{
    instance_destroy()
}
instance_create(x,y,choose(coin,coin,helth))
in=instance_create(x,y,dead)
in.sprite_index=Dead_Red_spr
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>self.canshoot=1
alarm[1]=30
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>self.zap=false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///think of what to do
if(path_exists(path)==false)
{
    path=path_add()
}
if(zap==false)
{
    //show_debug_message('starting')
    //show_debug_message('is there some thing to do')
    if(instance_exists(bad_target)==true)
    {
        obj=instance_nearest(x,y,bad_target)
        if(distance_to_object(obj)&lt;see)
        {
            //show_debug_message('i can get to him')
            if(collision_line(x,y,obj.x,obj.y,wall_par,true,true)==-4)
            {
                show_debug_message('setting the action to him')
                self.action=obj
                obj=0
            }
        }
        else
            {
                //show_debug_message("i can't get to him")
                self.action=-1
            }
    }
    else
        {
            self.action=-1
            //show_debug_message('there is no bad guys')
        }
    if(instance_exists(action)==false)
    {
        //show_debug_message('he is dead, resetting action')
        self.action=-1
        exit
    }
    /*if(distance_to_object(action)&lt;see)
    {
        if(collision_line(x,y,action.x,action.y,wall,true,true)&gt;0)
        {
            action=-1
        }
        else
            {
                moving(0,action,0,see,0)
            }
    }
    else
        {
            action=-1
        }*/
    //show_debug_message('he is in my sight')
    //take action
    //show_debug_message('start moving')
    if(self.action==-1)
    {
        //show_debug_message('im bord')
        //show_debug_message('this is the distens to the point: '+string(point_distance(x,y,xs,ys)))
        if(point_distance(x,y,xs,ys)&lt;24)
        {
            //show_debug_message('im at the point')
            path_end()
            if(irandom(40)==1)
            {
                //show_debug_message('resetting the point')
                dis=irandom_range(64,200)
                xs=x+floor(lengthdir_x(dis,random(360)))
                ys=y+floor(lengthdir_y(dis,random(360)))
                //show_debug_message(string(x)+'|'+string(y)+'|'+string(xs)+'|'+string(ys))
                if(mp_grid_path(grid_con.grid,path,x,y,xs,ys,false)==true)
                {
                }
                else
                    {
                        xs=x
                        ys=y
                        //show_debug_message('i can not get to the point')
                    }
            }
            else
                {
                    //show_debug_message('do not reste the point')
                }
        }
        else    
            {
                //show_debug_message('im moving to the point')
                //show_debug_message(string(xs)+','+string(ys))
                //show_debug_message(string(x)+','+string(y))
                if(mp_grid_path(grid_con.grid,path,x,y,xs,ys,false)==true)
                {
                    //show_debug_message('there is no collition')
                    moving(1,xs,ys,4,0)
                }
                else
                    {
                        xs=x
                        ys=y
                        //show_debug_message('i can not get to the point')
                    }
            }
    }
    else
        {
            //show_debug_message('im geting a guy')
            xs=x
            ys=y
            if(self.canshoot==1)
            {
                inst=instance_create(x,y,Bad_arrow)
                inst.direction=point_direction(x,y,action.x,action.y)
                inst.speed=15
                inst.image_angle=inst.direction
                inst.go=id
                self.canshoot=0
            }
        }
}
else
    {
        speed=.2
        self.life-=1
        x+=random_range(-5,5)
        y+=random_range(-5,5)
        if(irandom(3)==1)
        {
            direction=choose(0,90,180,270)
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///setting the spr
if(direction&lt;45)&amp;&amp;(direction&gt;0)
{
    sprite_index=Gard_red_right_spr
}
else if(direction&lt;360)&amp;&amp;(direction&gt;360-45)
{
    sprite_index=Gard_red_right_spr
}
else if(direction&lt;180-45)&amp;&amp;(direction&gt;45)
{
    sprite_index=Gard_red_up_spr
}
else if(direction&lt;270-45)&amp;&amp;(direction&gt;180-45)
{
    sprite_index=Gard_red_left_spr
}
else if(direction&lt;360-45)&amp;&amp;(direction&gt;270-45)
{
    sprite_index=Gard_red_down_spr
}
if(path_index&gt;-1)
{
    image_speed=1
}
else    
    {
        image_speed=0
    }
//if i have died
if(self.life&lt;0)
{
    instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="bad_par">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(self.zap==true)
{
    other.zap=true
    other.alarm[0]=random_range(20,40)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Archer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(self.zap==true)
{
    other.zap=true
    other.alarm[0]=random_range(20,40)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///setting the spr
if(direction&lt;45)&amp;&amp;(direction&gt;-1)
{
    draw_sprite(sprite_index,image_index,x,y)
    draw_sprite(bow_right_spr,0,x,y)
}
else if(direction&lt;361)&amp;&amp;(direction&gt;360-45)
{
    draw_sprite(sprite_index,image_index,x,y)
    draw_sprite(bow_right_spr,0,x,y)
}
else if(direction&lt;180-45)&amp;&amp;(direction&gt;45)
{
    draw_sprite(sprite_index,image_index,x,y)
    draw_sprite(bow_up_spr,0,x,y)
}
else if(direction&lt;270-45)&amp;&amp;(direction&gt;180-45)
{
    draw_sprite(sprite_index,image_index,x,y)
    draw_sprite(bow_left_spr,0,x,y)
}
else if(direction&lt;360-45)&amp;&amp;(direction&gt;270-45)
{
    draw_sprite(sprite_index,image_index,x,y)
    draw_sprite(bow_down_spr,0,x,y)
}
draw_healthbar(x-16,y-60,x+16,y-60+8,self.life/self.life_max*100,c_black,c_red,c_green,0,true,true)
if(self.zap==true)
{
    draw_sprite(lightning,image_index,x,y)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
